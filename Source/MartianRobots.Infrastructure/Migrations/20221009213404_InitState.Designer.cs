// <auto-generated />
using System;
using MartianRobots.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MartianRobots.Infrastructure.Migrations
{
    [DbContext(typeof(MartianRobotsContext))]
    [Migration("20221009213404_InitState")]
    partial class InitState
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MartianRobots.Domain.MapsAggregate.Cell", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Blocked")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RobotId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("MapId");

                    b.ToTable("Cell");
                });

            modelBuilder.Entity("MartianRobots.Domain.MapsAggregate.Map", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Maps");
                });

            modelBuilder.Entity("MartianRobots.Domain.RobotsAggregate.Robot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Orientation")
                        .HasColumnType("int");

                    b.Property<int>("RobotMode")
                        .HasColumnType("int");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Robots", (string)null);
                });

            modelBuilder.Entity("MartianRobots.Domain.MapsAggregate.Cell", b =>
                {
                    b.HasOne("MartianRobots.Domain.MapsAggregate.Map", null)
                        .WithMany("Cells")
                        .HasForeignKey("MapId");

                    b.OwnsOne("MartianRobots.Domain.MapsAggregate.Coordinates", "Coordinates", b1 =>
                        {
                            b1.Property<Guid>("CellId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("XPos")
                                .HasColumnType("int")
                                .HasColumnName("xPos");

                            b1.Property<int>("YPos")
                                .HasColumnType("int")
                                .HasColumnName("yPos");

                            b1.HasKey("CellId");

                            b1.ToTable("Cell");

                            b1.WithOwner()
                                .HasForeignKey("CellId");
                        });

                    b.Navigation("Coordinates")
                        .IsRequired();
                });

            modelBuilder.Entity("MartianRobots.Domain.RobotsAggregate.Robot", b =>
                {
                    b.OwnsOne("MartianRobots.Domain.MapsAggregate.Coordinates", "Coordinates", b1 =>
                        {
                            b1.Property<Guid>("RobotId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("XPos")
                                .HasColumnType("int")
                                .HasColumnName("xPos");

                            b1.Property<int>("YPos")
                                .HasColumnType("int")
                                .HasColumnName("yPos");

                            b1.HasKey("RobotId");

                            b1.ToTable("Robots");

                            b1.WithOwner()
                                .HasForeignKey("RobotId");
                        });

                    b.Navigation("Coordinates");
                });

            modelBuilder.Entity("MartianRobots.Domain.MapsAggregate.Map", b =>
                {
                    b.Navigation("Cells");
                });
#pragma warning restore 612, 618
        }
    }
}
